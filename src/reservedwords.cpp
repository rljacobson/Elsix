/*
    Created by Robert Jacobson on 04 April 2019.

    Elsix
    Description: An implementation of the Bell Telephone Laboratories'
                 Low-Level Linked List Language L6.

    Copyright (c) 2019 Robert Jacobson.
        The MIT License

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to
    deal in the Software without restriction, including without limitation the
    rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
    sell copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
    IN THE SOFTWARE.

    */

#include <unordered_map>
#include "reservedwords.hpp"
#include "nodetypes.hpp"

/**
 * @brief  Operator database.
 */

namespace elsix {


inline OperationData* lookup_op(std::string_view key, OperatorMap &map){
    char op_code_chars[4] = "\0\0\0"; // NOLINT(hicpp-avoid-c-arrays,modernize-avoid-c-arrays)

    // ToDo: This is stupid. We need a `char[4]`, but we have a `std::string_view`. Fortunately
    //  we don't need heep allocation.
    for(int i = 0; i < key.size(); i++){
        op_code_chars[i] = key[i];
    }
    auto found = map.find(op_code_chars);
    if(map.end() == found){
        return nullptr;
    }
    return &found->second;
}

inline NodeType lookup_keyword(std::string_view key){
    auto found = keywords.find(key);
    if(found == keywords.end()){
        return NodeType::EMPTY;
    }
    return found->second;
}

// region: KeywordMap keywords

/*
 * We are making `std::string_view`s out of statically allocated data. This data exists for the
 * life of the process, so this isn't exactly a memory leak, but neither is it particularly
 * elegant. This wouldn't be necessary if the STL supported `std::string_view`. (However, see ISO
 * C++ Proposal P1690R0 "Heterogeneous lookup for unordered containers,"
 * http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1690r0.html.)
 *
 */
KeywordMap keywords{ // NOLINT(cert-err58-cpp)
    {std::string_view("IFANY"), NodeType::IFANY}};
    
    /*
    ,
        {"IF",     NodeType::IFANY},
        {"IFALL",  NodeType::IFALL},
        {"IFNALL", NodeType::IFNALL},
        {"IFNONE", NodeType::IFNONE},
        {"NOT",    NodeType::IFNONE},
        {"THEN",   NodeType::THEN},
        {"DONE",   NodeType::DONE},
        {"FAIL",   NodeType::FAIL}
    }
};*/

// endregion: KeywordMap keywords

// region: OperatorMap operators

OperatorMap operators{{
    {   "SS\0",
        {   NodeType::SETUP_STORAGE,
            "SS\0",
            {ArgType::S, ArgType::D, ArgType::S, ArgType::_},
            "Setup storage"}},
    {   "D\0\0",
        {   NodeType::DEFINE_FIELD,
            "D\0\0",
            {ArgType::CD, ArgType::CD, ArgType::CD, ArgType::_},
            "Define field"}},
    {   "GT\0",
        {   NodeType::GET_BLOCK,
            "GT\0",
            {ArgType::C, ArgType::CD, ArgType::_, ArgType::_},
            "Get block"}},
    {   "GT\0",
        {   NodeType::GET_BLOCK,
            "GT\0",
            {ArgType::C, ArgType::CD, ArgType::C, ArgType::_},
            "Get block"}},
    {   "E\0\0",
        {   NodeType::SET_EQUAL,
            "E\0\0",
            {ArgType::C, ArgType::CD, ArgType::_, ArgType::_},
            "Set equal"}},
    {   "EO\0",
        {   NodeType::SET_EQUAL,
            "EO\0",
            {ArgType::C, ArgType::O, ArgType::_, ArgType::_},
            "Set equal"}},
    {   "EH\0",
        {   NodeType::SET_EQUAL,
            "EH\0",
            {ArgType::C, ArgType::H, ArgType::_, ArgType::_},
            "Set equal"}},
    {   "DP\0",
        {   NodeType::DUPLICATE_BLOCK,
            "DP\0",
            {ArgType::C, ArgType::C, ArgType::_, ArgType::_},
            "Duplicate block"}},
    {   "IC\0",
        {   NodeType::INTERCHANGE_CONTENTS,
            "IC\0",
            {ArgType::C, ArgType::C, ArgType::_, ArgType::_},
            "Interchange contents"}},
    {   "P\0\0",
        {   NodeType::POINT_TO_SAME_AS,
            "P\0\0",
            {ArgType::C, ArgType::C, ArgType::_, ArgType::_},
            "Make b Point to same as a"}},
    {   "A\0\0",
        {   NodeType::ADD,
            "A\0\0",
            {ArgType::C, ArgType::CD, ArgType::_, ArgType::_},
            "Add"}},
    {   "AO\0",
        {   NodeType::ADD,
            "AO\0",
            {ArgType::C, ArgType::O, ArgType::_, ArgType::_},
            "Add"}},
    {   "AH\0",
        {   NodeType::ADD,
            "AH\0",
            {ArgType::C, ArgType::H, ArgType::_, ArgType::_},
            "Add"}},
    {   "S\0\0",
        {   NodeType::SUBTRACT,
            "S\0\0",
            {ArgType::C, ArgType::CD, ArgType::_, ArgType::_},
            "Subtract"}},
    {   "SO\0",
        {   NodeType::SUBTRACT,
            "SO\0",
            {ArgType::C, ArgType::O, ArgType::_, ArgType::_},
            "Subtract"}},
    {   "SH\0",
        {   NodeType::SUBTRACT,
            "SH\0",
            {ArgType::C, ArgType::H, ArgType::_, ArgType::_},
            "Subtract"}},
    {   "M\0\0",
        {   NodeType::MULTIPLY,
            "M\0\0",
            {ArgType::C, ArgType::CD, ArgType::_, ArgType::_},
            "Multiply"}},
    {   "MO\0",
        {   NodeType::MULTIPLY,
            "MO\0",
            {ArgType::C, ArgType::O, ArgType::_, ArgType::_},
            "Multiply"}},
    {   "MH\0",
        {   NodeType::MULTIPLY,
            "MH\0",
            {ArgType::C, ArgType::H, ArgType::_, ArgType::_},
            "Multiply"}},
    {   "V\0\0",
        {   NodeType::DIVIDE,
            "V\0\0",
            {ArgType::C, ArgType::CD, ArgType::_, ArgType::_},
            "Divide"}},
    {   "VO\0",
        {   NodeType::DIVIDE,
            "VO\0",
            {ArgType::C, ArgType::O, ArgType::_, ArgType::_},
            "Divide"}},
    {   "VH\0",
        {   NodeType::DIVIDE,
            "VH\0",
            {ArgType::C, ArgType::H, ArgType::_, ArgType::_},
            "Divide"}},
    {   "O\0\0",
        {   NodeType::LOGICAL_OR,
            "O\0\0",
            {ArgType::C, ArgType::CO, ArgType::_, ArgType::_},
            "Logical OR"}},
    {   "OD\0",
        {   NodeType::LOGICAL_OR,
            "OD\0",
            {ArgType::C, ArgType::D, ArgType::_, ArgType::_},
            "Logical OR"}},
    {   "OH\0",
        {   NodeType::LOGICAL_OR,
            "OH\0",
            {ArgType::C, ArgType::H, ArgType::_, ArgType::_},
            "Logical OR"}},
    {   "N\0\0",
        {   NodeType::LOGICAL_AND,
            "N\0\0",
            {ArgType::C, ArgType::CO, ArgType::_, ArgType::_},
            "Logical AND"}},
    {   "ND\0",
        {   NodeType::LOGICAL_AND,
            "ND\0",
            {ArgType::C, ArgType::D, ArgType::_, ArgType::_},
            "Logical AND"}},
    {   "NH\0",
        {   NodeType::LOGICAL_AND,
            "NH\0",
            {ArgType::C, ArgType::H, ArgType::_, ArgType::_},
            "Logical AND"}},
    {   "X\0\0",
        {   NodeType::EXCLUSIVE_OR,
            "X\0\0",
            {ArgType::C, ArgType::CO, ArgType::_, ArgType::_},
            "Exclusive OR"}},
    {   "XD\0",
        {   NodeType::EXCLUSIVE_OR,
            "XD\0",
            {ArgType::C, ArgType::D, ArgType::_, ArgType::_},
            "Exclusive OR"}},
    {   "XH\0",
        {   NodeType::EXCLUSIVE_OR,
            "XH\0",
            {ArgType::C, ArgType::H, ArgType::_, ArgType::_},
            "Exclusive OR"}},
    {   "C\0\0",
        {   NodeType::COMPLEMENT,
            "C\0\0",
            {ArgType::C, ArgType::CO, ArgType::_, ArgType::_},
            "Complement"}},
    {   "CD\0",
        {   NodeType::COMPLEMENT,
            "CD\0",
            {ArgType::C, ArgType::D, ArgType::_, ArgType::_},
            "Complement"}},
    {   "CH\0",
        {   NodeType::COMPLEMENT,
            "CH\0",
            {ArgType::C, ArgType::H, ArgType::_, ArgType::_},
            "Complement"}},
    {   "L\0\0",
        {   NodeType::SHIFT_LEFT,
            "L\0\0",
            {ArgType::C, ArgType::CD, ArgType::_, ArgType::_},
            "Shift left"}},
    {   "L\0\0",
        {   NodeType::SHIFT_LEFT,
            "L\0\0",
            {ArgType::C, ArgType::CD, ArgType::CO, ArgType::_},
            "Shift left"}},
    {   "LD\0",
        {   NodeType::SHIFT_LEFT,
            "LD\0",
            {ArgType::C, ArgType::CD, ArgType::D, ArgType::_},
            "Shift left"}},
    {   "LH\0",
        {   NodeType::SHIFT_LEFT,
            "LH\0",
            {ArgType::C, ArgType::CD, ArgType::H, ArgType::_},
            "Shift left"}},
    {   "R\0\0",
        {   NodeType::SHIFT_RIGHT,
            "R\0\0",
            {ArgType::C, ArgType::CD, ArgType::_, ArgType::_},
            "Shift right"}},
    {   "R\0\0",
        {   NodeType::SHIFT_RIGHT,
            "R\0\0",
            {ArgType::C, ArgType::CD, ArgType::CO, ArgType::_},
            "Shift right"}},
    {   "RD\0",
        {   NodeType::SHIFT_RIGHT,
            "RD\0",
            {ArgType::C, ArgType::CD, ArgType::D, ArgType::_},
            "Shift right"}},
    {   "RH\0",
        {   NodeType::SHIFT_RIGHT,
            "RH\0",
            {ArgType::C, ArgType::CD, ArgType::H, ArgType::_},
            "Shift right"}},
    {   "LO\0",
        {   NodeType::LEFT_ONES,
            "LO\0",
            {ArgType::C, ArgType::C, ArgType::_, ArgType::_},
            "Count contiguous ones on the left"}},
    {   "LZ\0",
        {   NodeType::LEFT_ZEROES,
            "LZ\0",
            {ArgType::C, ArgType::C, ArgType::_, ArgType::_},
            "Count contiguous zeroes on the left"}},
    {   "RO\0",
        {   NodeType::RIGHT_ONES,
            "RO\0",
            {ArgType::C, ArgType::C, ArgType::_, ArgType::_},
            "Count contiguous ones on the right"}},
    {   "RZ\0",
        {   NodeType::RIGHT_ZEROES,
            "RZ\0",
            {ArgType::C, ArgType::C, ArgType::_, ArgType::_},
            "Count contiguous zeroes on the right"}},
    {   "OS\0",
        {   NodeType::COUNT_ONES,
            "OS\0",
            {ArgType::C, ArgType::C, ArgType::_, ArgType::_},
            "Count ones"}},
    {   "ZS\0",
        {   NodeType::COUNT_ZEROES,
            "ZS\0",
            {ArgType::C, ArgType::C, ArgType::_, ArgType::_},
            "Count zeroes"}},
    {   "IN\0",
        {   NodeType::INPUT,
            "IN\0",
            {ArgType::C, ArgType::CD, ArgType::_, ArgType::_},
            "Input"}},
    {   "PR\0",
        {   NodeType::PRINT,
            "PR\0",
            {ArgType::CD, ArgType::CO, ArgType::_, ArgType::_},
            "Print"}},
    {   "PRH",
        {   NodeType::PRINT,
            "PRH",
            {ArgType::CD, ArgType::H, ArgType::_, ArgType::_},
            "Print"}},
    {   "PL\0",
        {   NodeType::PRINT_LIST,
            "PL\0",
            {ArgType::C, ArgType::FIELD_NAME, ArgType::_, ArgType::_},
            "Print list"}},
    {   "PL\0",
        {   NodeType::PRINT_LIST,
            "PL\0",
            {ArgType::C, ArgType::FIELD_NAME, ArgType::CD, ArgType::_},
            "Print list"}},
    {   "PU\0",
        {   NodeType::PUNCH,
            "PU\0",
            {ArgType::CD, ArgType::CO, ArgType::_, ArgType::_},
            "Punch to punch card"}},
    {   "PUH",
        {   NodeType::PUNCH,
            "PUH",
            {ArgType::CD, ArgType::H, ArgType::_, ArgType::_},
            "Punch to punch card"}},
    {   "BZ\0",
        {   NodeType::BLANKS_TO_ZEROES,
            "BZ\0",
            {ArgType::C, ArgType::C, ArgType::_, ArgType::_},
            "Convert blanks to zeroes"}},
    {   "ZB\0",
        {   NodeType::ZEROES_TO_BLANKS,
            "ZB\0",
            {ArgType::C, ArgType::C, ArgType::_, ArgType::_},
            "Convert zeroes to blanks"}},
    {   "BD\0",
        {   NodeType::BINARY_TO_DECIMAL,
            "BD\0",
            {ArgType::C, ArgType::C, ArgType::_, ArgType::_},
            "Convert binary to decimal"}},
    {   "BO\0",
        {   NodeType::BINARY_TO_OCTAL,
            "BO\0",
            {ArgType::C, ArgType::C, ArgType::_, ArgType::_},
            "Convert binary to octal"}},
    {   "DB\0",
        {   NodeType::DECIMAL_TO_BINARY,
            "DB\0",
            {ArgType::C, ArgType::C, ArgType::_, ArgType::_},
            "Convert decimal to binary"}},
    {   "OB\0",
        {   NodeType::OCTAL_TO_BINARY,
            "OB\0",
            {ArgType::C, ArgType::C, ArgType::_, ArgType::_},
            "Convert octal to binary"}},
    {   "XR\0",
        {   NodeType::X_RANGE,
            "XR\0",
            {ArgType::CD, ArgType::CD, ArgType::_, ArgType::_},
            "Set window x span for drawing"}},
    {   "YR\0",
        {   NodeType::Y_RANGE,
            "YR\0",
            {ArgType::CD, ArgType::CD, ArgType::_, ArgType::_},
            "Set window y span for drawing"}},
    {   "TV\0",
        {   NodeType::TYPE_VERTICALLY,
            "TV\0",
            {ArgType::CD, ArgType::CD, ArgType::CO, ArgType::CD},
            "Type vertically"}},
    {   "TVH",
        {   NodeType::TYPE_VERTICALLY,
            "TVH",
            {ArgType::CD, ArgType::CD, ArgType::H, ArgType::CD},
            "Type vertically"}},
    {   "TH\0",
        {   NodeType::TYPE_HORIZONTALLY,
            "TH\0",
            {ArgType::CD, ArgType::CD, ArgType::CO, ArgType::CD},
            "Type horizontally"}},
    {   "THH",
        {   NodeType::TYPE_HORIZONTALLY,
            "THH",
            {ArgType::CD, ArgType::CD, ArgType::H, ArgType::CD},
            "Type horizontally"}},
    {   "DO\0",
        {   NodeType::DO_OR_FAIL,
            "DO\0",
            {ArgType::S, ArgType::S, ArgType::_, ArgType::_},
            "Go to line or procedure, if returned fail, go to alternate"}}
}};

// endregion: OperatorMap operators

// region: OperationMap tests

OperatorMap tests{{
    {   "E\0\0",
        {   NodeType::SET_EQUAL,
            "E\0\0",
            {ArgType::C, ArgType::CD, ArgType::_, ArgType::_},
            "Set equal"}},
    {   "EO\0",
        {   NodeType::SET_EQUAL,
            "EO\0",
            {ArgType::C, ArgType::O, ArgType::_, ArgType::_},
            "Set equal"}},
    {   "EH\0",
        {   NodeType::SET_EQUAL,
            "EH\0",
            {ArgType::C, ArgType::H, ArgType::_, ArgType::_},
            "Set equal"}},
    {   "N\0\0",
        {   NodeType::LOGICAL_AND,
            "N\0\0",
            {ArgType::C, ArgType::CD, ArgType::_, ArgType::_},
            "Logical AND"}},
    {   "NO\0",
        {   NodeType::INEQUALITY_TEST,
            "NO\0",
            {ArgType::C, ArgType::O, ArgType::_, ArgType::_},
            "Inequality test"}},
    {   "NH\0",
        {   NodeType::LOGICAL_AND,
            "NH\0",
            {ArgType::C, ArgType::H, ArgType::_, ArgType::_},
            "Logical AND"}},
    {   "G\0\0",
        {   NodeType::GREATER_TEST,
            "G\0\0",
            {ArgType::C, ArgType::CD, ArgType::_, ArgType::_},
            "Greater than test"}},
    {   "GO\0",
        {   NodeType::GREATER_TEST,
            "GO\0",
            {ArgType::C, ArgType::O, ArgType::_, ArgType::_},
            "Greater than test"}},
    {   "GH\0",
        {   NodeType::GREATER_TEST,
            "GH\0",
            {ArgType::C, ArgType::H, ArgType::_, ArgType::_},
            "Greater than test"}},
    {   "L\0\0",
        {   NodeType::LESS_TEST,
            "L\0\0",
            {ArgType::C, ArgType::CD, ArgType::_, ArgType::_},
            "Less than test"}},
    {   "LO\0",
        {   NodeType::LESS_TEST,
            "LO\0",
            {ArgType::C, ArgType::O, ArgType::_, ArgType::_},
            "Less than test"}},
    {   "LH\0",
        {   NodeType::LESS_TEST,
            "LH\0",
            {ArgType::C, ArgType::H, ArgType::_, ArgType::_},
            "Less than test"}},
    {   "P\0\0",
        {   NodeType::POINTS_SAME_BLOCK_TEST,
            "P\0\0",
            {ArgType::C, ArgType::C, ArgType::_, ArgType::_},
            "Points same block test"}},
    {   "O\0\0",
        {   NodeType::ONE_BITS_OF_TEST,
            "O\0\0",
            {ArgType::C, ArgType::CO, ArgType::_, ArgType::_},
            "Test if one bits of b agree with those of a, i.e. if (b & ~a) = 0"}},
    {   "OD\0",
        {   NodeType::ONE_BITS_OF_TEST,
            "OD\0",
            {ArgType::C, ArgType::D, ArgType::_, ArgType::_},
            "Test if one bits of b agree with those of a, i.e. if (b & ~a) = 0"}},
    {   "OH\0",
        {   NodeType::ONE_BITS_OF_TEST,
            "OH\0",
            {ArgType::C, ArgType::H, ArgType::_, ArgType::_},
            "Test if one bits of b agree with those of a, i.e. if (b & ~a) = 0"}},
    {   "Z\0\0",
        {   NodeType::ZERO_BITS_OF_TEST,
            "Z\0\0",
            {ArgType::C, ArgType::CO, ArgType::_, ArgType::_},
            "Test if zero bits of b agree with those of a, i.e. if (a & ~b) = 0"}},
    {   "ZD\0",
        {   NodeType::ZERO_BITS_OF_TEST,
            "ZD\0",
            {ArgType::C, ArgType::D, ArgType::_, ArgType::_},
            "Test if zero bits of b agree with those of a, i.e. if (a & ~b) = 0"}},
    {   "ZH\0",
        {   NodeType::ZERO_BITS_OF_TEST,
            "ZH\0",
            {ArgType::C, ArgType::H, ArgType::_, ArgType::_},
            "Test if zero bits of b agree with those of a, i.e. if (a & ~b) = 0"}}
}};
// endregion: OperationMap tests

// region: special_ops //Special cases.

const std::array<OperationData, 7> special_ops{  // NOLINT(cert-err58-cpp)
    {
        {   NodeType::POINT_TO_SAME_AS,
            "P\0\0",
            {ArgType::C, ArgType::D, ArgType::_, ArgType::_},
            "Make b Point to same as a"},
        {   NodeType::DRAW_POINT,
            "DL\0",
            {ArgType::CD, ArgType::CD, ArgType::_, ArgType::_},
            "Draw a point (a degenerate line)"},
        {   NodeType::DRAW_LINE,
            "DL\0",
            {ArgType::CD, ArgType::CD, ArgType::CD, ArgType::CD},
            "Draw a line"},
        {   NodeType::DO,
            "DO\0",
            {ArgType::S, ArgType::_, ArgType::_, ArgType::_},
            "Go to line or procedure"},
        {   NodeType::DO_STATE,
            "DO\0",
            {ArgType::STATE_CONST, ArgType::_, ArgType::_, ArgType::_},
            "Go to print state procedure"},
        {   NodeType::DO_DUMP,
            "DO\0",
            {ArgType::DUMP_CONST, ArgType::_, ArgType::_, ArgType::_},
            "Go to print state and system dump procedure"},
        {   NodeType::DO_ADVANCE,
            "DO\0",
            {ArgType::ADVANC_CONST, ArgType::_, ArgType::_, ArgType::_},
            "Go to advance frame procedure"}
    }
};
// endregion: special_ops //Special cases.

}
